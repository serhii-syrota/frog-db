// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20221010081618-45eb6bdf117a DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for SchemaType.
const (
	Char    SchemaType = "char"
	Image   SchemaType = "image"
	Integer SchemaType = "integer"
	Real    SchemaType = "real"
	RealInv SchemaType = "realInv"
	String  SchemaType = "string"
)

// DbSchema defines model for DbSchema.
type DbSchema = []TableSchema

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Info defines model for Info.
type Info struct {
	Message string `json:"message"`
}

// Row defines model for Row.
type Row map[string]interface{}

// RowNames defines model for RowNames.
type RowNames = []string

// Rows defines model for Rows.
type Rows = []Row

// Schema defines model for Schema.
type Schema struct {
	Column string     `json:"column"`
	Type   SchemaType `json:"type"`
}

// SchemaType defines model for Schema.Type.
type SchemaType string

// TableSchema defines model for TableSchema.
type TableSchema struct {
	Schema    *[]Schema `json:"schema,omitempty"`
	TableName *string   `json:"tableName,omitempty"`
}

// UpdateBody defines model for UpdateBody.
type UpdateBody struct {
	Conditions Row `json:"conditions"`
	Data       Row `json:"data"`
}

// DeleteRowsParams defines parameters for DeleteRows.
type DeleteRowsParams struct {
	// Conditions delete conditions
	Conditions Row `form:"conditions" json:"conditions"`
}

// SelectRowsParams defines parameters for SelectRows.
type SelectRowsParams struct {
	// Conditions conditions
	Conditions Row `form:"conditions" json:"conditions"`

	// Columns returned columns
	Columns RowNames `form:"columns" json:"columns"`
}

// CreateTableJSONRequestBody defines body for CreateTable for application/json ContentType.
type CreateTableJSONRequestBody = TableSchema

// UpdateRowsJSONRequestBody defines body for UpdateRows for application/json ContentType.
type UpdateRowsJSONRequestBody = UpdateBody

// InsertRowsJSONRequestBody defines body for InsertRows for application/json ContentType.
type InsertRowsJSONRequestBody = Rows

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /.schema)
	DbSchema(ctx echo.Context) error

	// (DELETE /table)
	DeleteTable(ctx echo.Context) error

	// (POST /table)
	CreateTable(ctx echo.Context) error

	// (DELETE /table/{name})
	DeleteRows(ctx echo.Context, name string, params DeleteRowsParams) error

	// (GET /table/{name})
	SelectRows(ctx echo.Context, name string, params SelectRowsParams) error

	// (PATCH /table/{name})
	UpdateRows(ctx echo.Context, name string) error

	// (POST /table/{name})
	InsertRows(ctx echo.Context, name string) error

	// (DELETE /table/{name}/duplicates)
	DeleteDuplicateRows(ctx echo.Context, name string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DbSchema converts echo context to params.
func (w *ServerInterfaceWrapper) DbSchema(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DbSchema(ctx)
	return err
}

// DeleteTable converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTable(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTable(ctx)
	return err
}

// CreateTable converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTable(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTable(ctx)
	return err
}

// DeleteRows converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRows(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteRowsParams
	// ------------- Required query parameter "conditions" -------------

	err = runtime.BindQueryParameter("form", true, true, "conditions", ctx.QueryParams(), &params.Conditions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter conditions: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRows(ctx, name, params)
	return err
}

// SelectRows converts echo context to params.
func (w *ServerInterfaceWrapper) SelectRows(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SelectRowsParams
	// ------------- Required query parameter "conditions" -------------

	err = runtime.BindQueryParameter("form", true, true, "conditions", ctx.QueryParams(), &params.Conditions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter conditions: %s", err))
	}

	// ------------- Required query parameter "columns" -------------

	err = runtime.BindQueryParameter("form", true, true, "columns", ctx.QueryParams(), &params.Columns)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter columns: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SelectRows(ctx, name, params)
	return err
}

// UpdateRows converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRows(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRows(ctx, name)
	return err
}

// InsertRows converts echo context to params.
func (w *ServerInterfaceWrapper) InsertRows(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InsertRows(ctx, name)
	return err
}

// DeleteDuplicateRows converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDuplicateRows(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDuplicateRows(ctx, name)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/.schema", wrapper.DbSchema)
	router.DELETE(baseURL+"/table", wrapper.DeleteTable)
	router.POST(baseURL+"/table", wrapper.CreateTable)
	router.DELETE(baseURL+"/table/:name", wrapper.DeleteRows)
	router.GET(baseURL+"/table/:name", wrapper.SelectRows)
	router.PATCH(baseURL+"/table/:name", wrapper.UpdateRows)
	router.POST(baseURL+"/table/:name", wrapper.InsertRows)
	router.DELETE(baseURL+"/table/:name/duplicates", wrapper.DeleteDuplicateRows)

}

type DbSchemaRequestObject struct {
}

type DbSchemaResponseObject interface {
	VisitDbSchemaResponse(w http.ResponseWriter) error
}

type DbSchema200JSONResponse DbSchema

func (response DbSchema200JSONResponse) VisitDbSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DbSchemadefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DbSchemadefaultJSONResponse) VisitDbSchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteTableRequestObject struct {
}

type DeleteTableResponseObject interface {
	VisitDeleteTableResponse(w http.ResponseWriter) error
}

type DeleteTable200JSONResponse Info

func (response DeleteTable200JSONResponse) VisitDeleteTableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTabledefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteTabledefaultJSONResponse) VisitDeleteTableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateTableRequestObject struct {
	Body *CreateTableJSONRequestBody
}

type CreateTableResponseObject interface {
	VisitCreateTableResponse(w http.ResponseWriter) error
}

type CreateTable200JSONResponse Info

func (response CreateTable200JSONResponse) VisitCreateTableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateTabledefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateTabledefaultJSONResponse) VisitCreateTableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteRowsRequestObject struct {
	Name   string `json:"name"`
	Params DeleteRowsParams
}

type DeleteRowsResponseObject interface {
	VisitDeleteRowsResponse(w http.ResponseWriter) error
}

type DeleteRows200JSONResponse Info

func (response DeleteRows200JSONResponse) VisitDeleteRowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRowsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteRowsdefaultJSONResponse) VisitDeleteRowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SelectRowsRequestObject struct {
	Name   string `json:"name"`
	Params SelectRowsParams
}

type SelectRowsResponseObject interface {
	VisitSelectRowsResponse(w http.ResponseWriter) error
}

type SelectRows200JSONResponse Rows

func (response SelectRows200JSONResponse) VisitSelectRowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SelectRowsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SelectRowsdefaultJSONResponse) VisitSelectRowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateRowsRequestObject struct {
	Name string `json:"name"`
	Body *UpdateRowsJSONRequestBody
}

type UpdateRowsResponseObject interface {
	VisitUpdateRowsResponse(w http.ResponseWriter) error
}

type UpdateRows200JSONResponse Info

func (response UpdateRows200JSONResponse) VisitUpdateRowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRowsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateRowsdefaultJSONResponse) VisitUpdateRowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type InsertRowsRequestObject struct {
	Name string `json:"name"`
	Body *InsertRowsJSONRequestBody
}

type InsertRowsResponseObject interface {
	VisitInsertRowsResponse(w http.ResponseWriter) error
}

type InsertRows200JSONResponse Info

func (response InsertRows200JSONResponse) VisitInsertRowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type InsertRowsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response InsertRowsdefaultJSONResponse) VisitInsertRowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteDuplicateRowsRequestObject struct {
	Name string `json:"name"`
}

type DeleteDuplicateRowsResponseObject interface {
	VisitDeleteDuplicateRowsResponse(w http.ResponseWriter) error
}

type DeleteDuplicateRows200JSONResponse Info

func (response DeleteDuplicateRows200JSONResponse) VisitDeleteDuplicateRowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDuplicateRowsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteDuplicateRowsdefaultJSONResponse) VisitDeleteDuplicateRowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /.schema)
	DbSchema(ctx context.Context, request DbSchemaRequestObject) (DbSchemaResponseObject, error)

	// (DELETE /table)
	DeleteTable(ctx context.Context, request DeleteTableRequestObject) (DeleteTableResponseObject, error)

	// (POST /table)
	CreateTable(ctx context.Context, request CreateTableRequestObject) (CreateTableResponseObject, error)

	// (DELETE /table/{name})
	DeleteRows(ctx context.Context, request DeleteRowsRequestObject) (DeleteRowsResponseObject, error)

	// (GET /table/{name})
	SelectRows(ctx context.Context, request SelectRowsRequestObject) (SelectRowsResponseObject, error)

	// (PATCH /table/{name})
	UpdateRows(ctx context.Context, request UpdateRowsRequestObject) (UpdateRowsResponseObject, error)

	// (POST /table/{name})
	InsertRows(ctx context.Context, request InsertRowsRequestObject) (InsertRowsResponseObject, error)

	// (DELETE /table/{name}/duplicates)
	DeleteDuplicateRows(ctx context.Context, request DeleteDuplicateRowsRequestObject) (DeleteDuplicateRowsResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DbSchema operation middleware
func (sh *strictHandler) DbSchema(ctx echo.Context) error {
	var request DbSchemaRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DbSchema(ctx.Request().Context(), request.(DbSchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DbSchema")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DbSchemaResponseObject); ok {
		return validResponse.VisitDbSchemaResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteTable operation middleware
func (sh *strictHandler) DeleteTable(ctx echo.Context) error {
	var request DeleteTableRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTable(ctx.Request().Context(), request.(DeleteTableRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTable")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTableResponseObject); ok {
		return validResponse.VisitDeleteTableResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateTable operation middleware
func (sh *strictHandler) CreateTable(ctx echo.Context) error {
	var request CreateTableRequestObject

	var body CreateTableJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTable(ctx.Request().Context(), request.(CreateTableRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTable")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateTableResponseObject); ok {
		return validResponse.VisitCreateTableResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteRows operation middleware
func (sh *strictHandler) DeleteRows(ctx echo.Context, name string, params DeleteRowsParams) error {
	var request DeleteRowsRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRows(ctx.Request().Context(), request.(DeleteRowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRowsResponseObject); ok {
		return validResponse.VisitDeleteRowsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// SelectRows operation middleware
func (sh *strictHandler) SelectRows(ctx echo.Context, name string, params SelectRowsParams) error {
	var request SelectRowsRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SelectRows(ctx.Request().Context(), request.(SelectRowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SelectRows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SelectRowsResponseObject); ok {
		return validResponse.VisitSelectRowsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UpdateRows operation middleware
func (sh *strictHandler) UpdateRows(ctx echo.Context, name string) error {
	var request UpdateRowsRequestObject

	request.Name = name

	var body UpdateRowsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRows(ctx.Request().Context(), request.(UpdateRowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateRowsResponseObject); ok {
		return validResponse.VisitUpdateRowsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// InsertRows operation middleware
func (sh *strictHandler) InsertRows(ctx echo.Context, name string) error {
	var request InsertRowsRequestObject

	request.Name = name

	var body InsertRowsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.InsertRows(ctx.Request().Context(), request.(InsertRowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "InsertRows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(InsertRowsResponseObject); ok {
		return validResponse.VisitInsertRowsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteDuplicateRows operation middleware
func (sh *strictHandler) DeleteDuplicateRows(ctx echo.Context, name string) error {
	var request DeleteDuplicateRowsRequestObject

	request.Name = name

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDuplicateRows(ctx.Request().Context(), request.(DeleteDuplicateRowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDuplicateRows")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteDuplicateRowsResponseObject); ok {
		return validResponse.VisitDeleteDuplicateRowsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYX4+jNhD/KmjaRy6k7cuJp/7ZPuShVbW7fTpFlTET8BVs1ja7iiK+e+WxCeGA7La6",
	"NNHdGzB//ZufZyY5AFd1oyRKayA9gOEl1owe77IHenHPwmJNH7/VuIMUvkkGsyTYJI8sqzDYdDHYfYOQ",
	"AtOa7d37r1or7Xw0WjWorUDyWKMxrED3GCyM1UIW0HUxaHxqhcYc0g9Hxe3Rtco+IrfO90bu1IVc36sX",
	"54DlubBCSVb9cRLD6hbnbX5ntU/iCN0nKUwBulcv5s1gu7RmfAwlG0PBVdXW8kwaB0DZ1g4MIS0WqMFB",
	"xCqIgZfMvQUL/3kjnyEGUY9RW4A3BA9qcyCfUmeSu/l3NFxmoHVRXGHmGTHJ6s8mZxZ/Vvl+DlDpCfHW",
	"SuXMsjepTsA7BgpOpgA6GxGuAFfSMm6pojUTlTsj6lKIv8xeK8t+/Fu2q5ZBDJKQgAeSRg8khRha7WxK",
	"axuTJkkhbNlmK67qxHgHdBg0XIvGpQUp/BTttCre5Vmk0djIEUjvGMeoQImaWcyjbB8p1oh3XOVYoONC",
	"JThKQ6UIify2eaQqCVu513mfEMMzauMDf7dar9bORjUoWSMghR/oUwwNsyWVJlkN/CmQcBlnf4+21dJE",
	"DtuMGYyCPnnVzGltckiHfujqYxoljWfC9+t1jztK8s+aphKcLJOPRskxic8R4BiDSjrO0+tEfWxfhh1r",
	"K/vZwvsWPRMbe0EXQ0LXyONYocUponf0PcqzyKtOkCT5Y5BdDEwaCjOH8WlfGcgYGmVm2Mg1snPY/ULy",
	"AbunFo3tW9RnyX00xqcnoLSGOzK0KjcLuyuUMyB2I/ciObhu1p27Hj3/1ItxjbP2lXYt8tjrF64MbQiu",
	"t2lWo0VtIP1wmK0PtVQ3FCClVji0+yAZ1y0+AWIyGBfyHw0mCvTUot4PkUYKy/FeH4jbr7dJzE4sgxVy",
	"+ymBJpx5ILXb4Mz/R5ZJaE3zHfPIr6HLCfTS/xzd7/yX5SuVc247CJy49lBjlpdTxra0SXvGCrnAV79u",
	"X4Wv28uM0pMfEHODixhHoNzEIO2LdJN7kZAGdeh5Vi0waENKXxKDlq77rXHnJpewJG99MI/DK/vYUfnV",
	"weqXsbte/3p8+xp3IicyqJ97nIe/K9IkqRRnVamMTd+v36+T8BcCdNvunwAAAP//UIiAM+kUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
