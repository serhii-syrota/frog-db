openapi: "3.0.0"
info:
  version: 1.0.0
  title: frog-db rest interface
  description: A frog-db rest interface generated by oapi-codegen
  contact:
    name: Serhii Syrota
    email: serhii_syrota@knu.ua
    url: https://github.com/ssyrota
  license:
    name: MIT
servers:
  - url: http://localhost:8080

paths:
  /.schema:
    get:
      description: Returns database schema
      operationId: db schema
      responses:
        '200':
          description: schema response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DbSchema'
        default:
          description: error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /delete-table/{name}/:
    post:
      description: Delete db table
      operationId: delete table
      parameters: 
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: table name
      responses:
          '200':
            description: delete response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Info'
          default:
            description: error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  /table:
    post:
      description: create db table
      operationId: create table
      requestBody: 
        description: table schema
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/TableSchema'
      responses:
          '200':
            description: create response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Info'
          default:
            description: error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  /table/{name}/select:
    post:
      description: select rows from table
      operationId: select rows
      parameters: 
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: table name
      requestBody: 
        description: select body
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/SelectBody'

      responses:
          '200':
            description: select response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Rows'
          default:
            description: error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  /table/{name}:
    post:
      description: insert rows to table
      operationId: insert rows
      parameters: 
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: table name
      requestBody: 
        description: column rows
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Rows'
      responses:
          '200':
            description: create response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Info'
          default:
            description: error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    patch:
      description: update rows in table
      operationId: update rows
      parameters: 
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: table name
      requestBody: 
        description: column rows
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBody'
      responses:
          '200':
            description: update response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Info'
          default:
            description: error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  /table/{name}/remove-duplicates:
    post:
      description: delete duplicate rows from table
      operationId: delete duplicate rows
      parameters: 
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: table name
      responses:
          '200':
            description: delete response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Info'
          default:
            description: error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
  /table/{name}/delete:
    post:
      description: delete rows from table by condition
      operationId: delete rows
      parameters: 
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: table name
      requestBody: 
        description: column rows
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Row'
      responses:
          '200':
            description: delete response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Info'
          default:
            description: error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
components:
  schemas:
    DbSchema:
      type: array
      items:
        $ref: '#/components/schemas/TableSchema'

    TableSchema:
      type: object
      properties:
        tableName:
          type: string
        schema:
          type: array
          items:
            $ref: '#/components/schemas/Schema'
        
    Schema:
      type: object
      required:
        - column
        - type
      properties:
        column:
          type: string
        type:
          type: string
          enum:
            - integer
            - real
            - char
            - string
            - realInv
            - image

    Info:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          
    SelectBody:
      type: object
      required:
        - columns
        - conditions
      properties:
        columns:
          $ref: '#/components/schemas/RowNames'
        conditions:
          $ref: '#/components/schemas/Row'
          
    DeleteBody:
      type: object
      required: 
        - conditions
        - data
      properties:
        conditions:
          $ref: '#/components/schemas/Row'
      
    UpdateBody:
      type: object
      required: 
        - conditions
        - data
      properties:
        data:
          $ref: '#/components/schemas/Row'
        conditions:
          $ref: '#/components/schemas/Row'
    
    Rows:
      type: array
      items:
        $ref: '#/components/schemas/Row'
      minItems: 0
    
    Row:
      type: object
      additionalProperties: true
    
    RowNames:
      type: array
      items:
        type: string
      minItems: 0
    
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string